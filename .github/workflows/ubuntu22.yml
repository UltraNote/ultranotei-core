name: Ubuntu 22.04

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build-ubuntu22:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@master

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/lib
            /usr/local/include
          key: ${{ runner.os }}-deps-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git cmake libboost1.82-all-dev libreadline-dev
          
      - name: Build project
        id: build-project
        run: |
          build_folder="build/release"
          xuni_ver=$(echo "$GITHUB_REF" | sed 's|refs/tags/||')
          release_name=xuni-cli-ubuntu-2204-v"$xuni_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake -DCMAKE_BUILD_TYPE=Release ../..
          make -j2
          
      - name: Run tests
        run: |
          cd "$build_folder"
          ctest --output-on-failure
          mkdir -p "$release_name/$xuni_ver_folder"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          cp "${exeFiles[@]}" "$release_name/$xuni_ver_folder"
          cd "$release_name"
          tar -czf "$release_name".tar.gz "$xuni_ver_folder"
          sha256=$(shasum -a 256 "$release_name".tar.gz | awk '{print toupper($1)}')
          asset_path="./$build_folder/$release_name/$release_name.tar.gz"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.tar.gz"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=ccx_version::${ccx_version}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.build.outputs.asset_path }}
          name: UltraNote Core CLI v${{ steps.build.outputs.ccx_version }}
          body: |
            **${{ steps.build.outputs.release_name }}**
            ${{ steps.build.outputs.sha256 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
