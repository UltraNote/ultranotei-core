name: Ubuntu 20.04

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build-ubuntu20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
      
      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git cmake libboost-all-dev libreadline-dev
      - name: Build
        id: build
        run: |
          build_folder="build/debug"
          xuni_ver=$(echo "$GITHUB_REF" | sed 's|refs/tags/||')
          xuni_ver_folder=$(echo $xuni_ver | sed 's/\.//g')
          release_name=xuni-cli-ubuntu-2004-v"$xuni_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../..
          make -j2
          mkdir -p "$release_name/$xuni_ver_folder"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          cp "${exeFiles[@]}" "$release_name/$xuni_ver_folder"
          cd "$release_name"
          tar -czf "$release_name".tar.gz "$xuni_ver_folder"
          sha256=$(shasum -a 256 "$release_name".tar.gz | awk '{print toupper($1)}')
          asset_path="./$build_folder/$release_name/$release_name.tar.gz"
          echo "::set-output name=sha256::${sha256}"
          echo "::set-output name=release_name::${release_name}.tar.gz"
          echo "::set-output name=asset_path::${asset_path}"
          echo "::set-output name=ccx_version::${ccx_version}"
      - name: Create Release
        uses: softprops/action-gh-release@v0.1.12
        with:
          files: ${{ steps.build.outputs.asset_path }}
          name: UltraNote Core CLI v${{ steps.build.outputs.xuni_ver }}
          body: |
            **${{ steps.build.outputs.release_name }}**
            ${{ steps.build.outputs.sha256 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
